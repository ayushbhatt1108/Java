The if-else statement is used to make decisions in Java. It allows a program to execute different 
blocks of code based on whether a condition is true or false.

1. Simple if Statement

Executes a block of code only if the condition is true.

int num = 10;
if (num > 0) {
    System.out.println("Number is positive.");
}

If the condition is false, nothing happens.

2. if-else Statement

Executes one block if the condition is true, another if it’s false.

int num = -5;
if (num >= 0) {
    System.out.println("Positive number");
} else {
    System.out.println("Negative number");
}

3. if-else if-else Ladder

Used when you have multiple conditions to check.

int marks = 75;
if (marks >= 90) {
    System.out.println("Grade A");
} else if (marks >= 80) {
    System.out.println("Grade B");
} else if (marks >= 70) {
    System.out.println("Grade C");
} else if (marks >= 60) {
    System.out.println("Grade D");
} else {
    System.out.println("Fail");
}

Conditions are checked top to bottom — as soon as one is true, the rest are skipped.

4. Nested if Statement

An if inside another if. Great for multiple layers of logic.

int age = 20;
boolean hasID = true;
if (age >= 18) {
    if (hasID) {
        System.out.println("You can enter.");
    } else {
        System.out.println("ID required.");
    }
} else {
    System.out.println("You must be 18+.");
}

6. Multiple Conditions using Logical Operators

Use &&, ||, and ! with if for more complex conditions.

int age = 25;
boolean hasLicense = true;

if (age >= 18 && hasLicense) {
    System.out.println("You can drive.");
} else {
    System.out.println("You cannot drive.");
}








